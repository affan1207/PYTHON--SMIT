# -*- coding: utf-8 -*-
"""PY275066.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gJk9LV1Yp9QxxBnvXXnVe411PtlqFnZM
"""

import random

words = ["python", "programming", "hangman", "computer", "keyboard", "function", "variable"]

def get_random_word(word_list):
    return random.choice(word_list)

def display_word(word, guessed_letters):
    return ''.join([letter if letter in guessed_letters else '_' for letter in word])

def play_hangman():
    word = get_random_word(words)
    guessed_letters = set()
    incorrect_guesses = 0
    max_incorrect_guesses = 6

    print("Welcome to Hangman!")

    while incorrect_guesses < max_incorrect_guesses:
        current_display = display_word(word, guessed_letters)
        print("\nWord: ", current_display)

        print("Incorrect guesses left:", max_incorrect_guesses - incorrect_guesses)
        print("Guessed letters:", " ".join(sorted(guessed_letters)))

        guess = input("Enter a letter: ").lower()

        if len(guess) != 1 or not guess.isalpha():
            print("Invalid input. Please enter a single letter.")
            continue

        if guess in guessed_letters:
            print("You already guessed that letter. Try a different one.")
            continue

        guessed_letters.add(guess)

        if guess in word:
            print(f"Good guess! '{guess}' is in the word.")
        else:
            print(f"Sorry, '{guess}' is not in the word.")
            incorrect_guesses += 1

        if all(letter in guessed_letters for letter in word):
            print("\nCongratulations! You guessed the word:", word)
            return True

    print("\nGame over! You've run out of guesses.")
    print("The word was:", word)
    return False

def main():
    while True:
        play_hangman()
        play_again = input("\nWould you like to play again? (yes or no): ").lower()
        if play_again != 'yes':
            print("Thanks for playing Hangman!")
            break

if __name__ == "__main__":
    main()

def add_student(grades):
    name = input("ENTER STUDENT NAME: ")
    while True:
        try:
            grade = float(input("ENTER GRADE (0-100): "))
            if 0 <= grade <= 100:
                grades[name] = grade
                break
            else:
                print("Invalid grade. Please enter a value between 0 and 100.")
        except ValueError:
            print("Invalid input. Please enter a numeric value.")

def view_all_grades(grades):
    if grades:
        print("\nAll Student Grades:")
        for name, grade in grades.items():
            print("Name:", name, "Grade:", grade)
    else:
        print("\nNo grades to display.")

def calculate_average(grades):
    if grades:
        average = sum(grades.values()) / len(grades)
        print("\nAverage Grade:", average)
        return average
    else:
        print("\nNo grades available to calculate average.")
        return None

def display_above_below_average(grades):
    if not grades:
        print("\nNo grades to compare with the average.")
        return

    average = calculate_average(grades)
    print("\nStudent grades relative to the average:")
    for name, grade in grades.items():
        if grade > average:
            print(f"Name: {name}, Grade: {grade} (Above Average)")
        elif grade < average:
            print(f"Name: {name}, Grade: {grade} (Below Average)")
        else:
            print(f"Name: {name}, Grade: {grade} (Equal to Average)")

def main():
    grades = {}

    while True:
        print("\n\t\t\tSTUDENT MANAGEMENT SYSTEM")
        print("1. Add student name and Add student grades")
        print("2. View all student grades")
        print("3. Average grade")
        print("4. Display student grades above/below average")
        print("5. Exit")

        try:
            op = int(input("ENTER OPTION: "))
            if op == 1:
                add_student(grades)
            elif op == 2:
                view_all_grades(grades)
            elif op == 3:
                calculate_average(grades)
            elif op == 4:
                display_above_below_average(grades)
            elif op == 5:
                print("Exiting...")
                break
            else:
                print("Invalid option. Please select a valid option.")
        except ValueError:
            print("Invalid input. Please enter a numeric value.")

if __name__ == "__main__":
    main()